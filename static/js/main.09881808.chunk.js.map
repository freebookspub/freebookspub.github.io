{"version":3,"sources":["app/pages/menu/index.tsx","app/pages/homePage/homePage.tsx","routesConfig.ts","app/pages/secondPage/secondPage.tsx","App.tsx","app/actions/sampleActions.ts","app/actions/actionConstants.ts","serviceWorker.ts","app/reducers/helloReducer.ts","app/reducers/index.ts","index.tsx"],"names":["Search","Input","menuPage","className","span","src","alt","to","placeholder","onSearch","value","console","log","Component","homePage","Routes","path","exact","component","App","this","props","fetchHelloWorld","helloWorld","message","map","route","key","from","connect","state","helloReducer","type","payload","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","rootReducer","combineReducers","action","moment","locale","store","createStore","applyMiddleware","reduxPromise","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.09881808.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\"\nimport { Row, Col } from 'antd';\nimport { Input } from 'antd';\nimport './index.scss';\n\nconst { Search } = Input;\n\n\nclass menuPage extends Component {\n    render() {\n        return (\n            <div className=\"main menufont\">\n                <div className=\"menu\">\n                    <Row>\n                        <Col span={1} ></Col>\n                        <Col span={1} ><div>\n                            <img src=\"/imgs/menu/logo.svg\" alt=\"\" className=\"logo\" /></div></Col>\n                        <Col span={5} ><div className=\"title\">FreeBooks.pub</div></Col>\n                        <Col span={5} ></Col>\n                        <Col span={1} ></Col>\n                        <Col span={1} ><Link to=\"/\">首页</Link> </Col>\n                        <Col span={1} ><Link to=\"/second/\">列表</Link> </Col>\n                        <Col span={1} ><Link to=\"/about/\">关于</Link></Col>\n                        <Col span={1} ><Link to=\"/add/\">增加</Link></Col>\n                        <Col span={1} ></Col>\n                        <Col span={1} ></Col>\n                        <Col span={4} >\n                            <Search\n                                placeholder=\"输入书名...\"\n                                onSearch={value => console.log(value)}\n                            />\n                        </Col>\n                        <Col span={1} ></Col>\n                    </Row>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default menuPage;","import React, { Component } from 'react';\nimport './homePage.scss';\nimport Menu from \"../menu\"\n\nclass homePage extends Component {\n    render() {\n        return (\n            <div>\n                <Menu></Menu>\n                Home Page\n            </div>\n        );\n    }\n}\n\nexport default homePage;","import homePage from \"./app/pages/homePage/homePage\";\nimport secondPage from \"./app/pages/secondPage/secondPage\";\n\nexport const Routes = [\n    {\n        path: '/',\n        exact: true,\n        component: homePage\n    },\n    {\n        path: '/second',\n        exact: false,\n        component: secondPage\n    }\n];","import React, { Component } from 'react';\nimport './secondPage.scss';\n\nclass secondPage extends Component {\n    render() {\n        return (\n            <div>\n                Second Page\n            </div>\n        );\n    }\n}\n\nexport default secondPage;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchHelloWorld } from './app/actions/sampleActions';\nimport { Routes } from './routesConfig';\nimport { Route, Redirect } from 'react-router-dom';\n\ninterface AppProps {\n  fetchHelloWorld: any;\n  helloWorld: { message: string };\n};\n\nclass App extends Component<AppProps, {}> {\n  componentDidMount() {\n    // sample action call\n    this.props.fetchHelloWorld();\n  }\n\n  render() {\n    console.log(this.props.helloWorld.message, Routes);\n    return (\n      <div>\n        {Routes.map((route, key) => (\n          <Route key={key} path={route.path} exact={route.exact} component={route.component} />\n        ))}\n        <Redirect from='/**' to='/' />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    helloWorld: state.helloReducer\n  };\n};\n\nexport default connect(mapStateToProps, { fetchHelloWorld })(App);\n","import { HELLO_WORLD } from \"./actionConstants\";\n\nexport const fetchHelloWorld = () => {\n    return {\n        type: HELLO_WORLD,\n        payload: 'Hello World!'\n    };\n};","// sample action created\n// [you can create your actions here]\nconst HELLO_WORLD = 'hello_world';\n\nexport {\n    HELLO_WORLD\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// sample reducer\nimport { HELLO_WORLD } from \"../actions/actionConstants\";\n\ninterface Action {\n    type: String;\n    payload: any;\n}\n\nexport default (state: any = {}, action: Action) => {\n    switch (action.type) {\n        case HELLO_WORLD:\n            return { ...state, message: action.payload };\n        default:\n            return state;\n    };\n};","import { combineReducers } from 'redux';\nimport helloReducer from './helloReducer';\n\n// centralized reducer \n// all reducers map to one here\nconst rootReducer = combineReducers({\n    helloReducer\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxPromise from 'redux-promise';\nimport rootReducer from './app/reducers';\n\n// import zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport 'antd/dist/antd.css';\n\nmoment.locale('zh-cn');\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(reduxPromise)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <Switch>\n                <Route path='/' component={App} />\n            </Switch>\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}